[{"content": "<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">Data structure</h1>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>In computer science, a <b>data structure</b> is a particular way of organizing data in a computer so that it can be used efficiently.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Different kinds of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, databases use B-tree indexes for small percentages of data retrieval and compilers and databases use dynamic hash tables as look up tables.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms. Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Storing and retrieving can be carried out on data stored in both main memory and in secondary memory.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p></p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>Contents</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p></p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>Overview</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Data structures are generally based on the ability of a computer to fetch and store data at any place in its memory, specified by a pointer\u00a0\u2013  a bit string, representing a memory address, that can be itself stored in memory and manipulated by the program. Thus, the array and record data structures are based on computing the addresses of data items with arithmetic operations; while the linked data structures are based on storing addresses of data items within the structure itself. Many data structures use both principles, sometimes combined in non-trivial ways (as in XOR linking).</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>The implementation of a data structure usually requires writing a set of procedures that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This observation motivates the theoretical concept of an abstract data type, a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and time cost).</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>Examples</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>There are numerous types of data structures, generally built upon simpler primitive data types:</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>Language support</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Most assembly languages and some low-level languages, such as BCPL (Basic Combined Programming Language), lack built-in support for data structures. On the other hand, many high-level programming languages and some higher-level assembly languages, such as MASM, have special syntax or other built-in support for certain data structures, such as records and arrays. For example, the C and Pascal languages support structs and records, respectively, in addition to vectors (one-dimensional arrays) and multi-dimensional arrays.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Most programming languages feature some sort of library mechanism that allows data structure implementations to be reused by different programs. Modern languages usually come with standard libraries that implement the most common data structures. Examples are the C++ Standard Template Library, the Java Collections Framework, and Microsoft's .NET Framework.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Modern languages also generally support modular programming, the separation between the interface of a library module and its implementation. Some provide opaque data types that allow clients to hide implementation details. Object-oriented programming languages, such as C++, Java and Smalltalk may use classes for this purpose.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<p>Many known data structures have concurrent versions that allow multiple computing threads to access the data structure simultaneously.</p>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>See also</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>References</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>Further reading</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>External links</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]},
{"content": "<h2>Navigation menu</h2>", "title": ["Data structure - Wikipedia, the free encyclopedia"]}]